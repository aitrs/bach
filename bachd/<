use crate::modulemanager;
use crate::modulemanagerconfig::ModuleManagerConfig;
use bach_bus::bus::Bus;
use bach_bus::packet::{PacketCore, CORE_SIZE};
use bach_module::ModError;
use serde::{Deserialize, Serialize};
use std::fs;
use std::io::prelude::*;
use std::io::BufReader;
use std::net::TcpStream;
use std::path::Path;
use std::sync::Mutex;
use std::thread;
use std::time::Duration;

enum DaemonStatic<T> {
    Nil,
    Init(Mutex<T>),
}

impl<T> DaemonStatic<T> {
    pub fn mkinit(item: T) -> Self {
        DaemonStatic::Init(Mutex::new(item))
    }

    pub fn inner(&self) -> Option<&Mutex<T>> {
        match self {
            DaemonStatic::Init(item) => Some(item),
            DaemonStatic::Nil => None,
        }
    }
}

static mut module_manager: DaemonStatic<modulemanager::ModuleManager> = DaemonStatic::Nil;
static mut bus: DaemonStatic<Bus> = DaemonStatic::Nil;

#[derive(Debug, Clone)]
pub struct DaemonError {
    message: String,
    code: u64,
}

impl DaemonError {
    pub fn new(message: String, code: u64) -> Self {
        DaemonError { message, code }
    }
}

impl std::error::Error for DaemonError {}

impl std::fmt::Display for DaemonError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_fmt(format_args!(
            "Code: {} :: Message: {}",
            self.code, self.message
        ))
    }
}

impl From<std::io::Error> for DaemonError {
    fn from(item: std::io::Error) -> Self {
        DaemonError {
            code: 1,
            message: item.to_string(),
        }
    }
}

impl From<quick_xml::DeError> for DaemonError {
    fn from(item: quick_xml::DeError) -> Self {
        DaemonError {
            code: 2,
            message: item.to_string(),
        }
    }
}

impl From<ModError> for DaemonError {
    fn from(item: ModError) -> Self {
        DaemonError {
            code: 3,
            message: item.to_string(),
        }
    }
}

pub type DaemonResult<T> = Result<T, DaemonError>;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DaemonConfigAcceptIp(String);
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DaemonConfigTcpPort(u64);
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DaemonConfigLogLevel(String);

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DaemonConfig {
    pub port: DaemonConfigTcpPort,
    pub ip: DaemonConfigAcceptIp,
    #[serde(rename = "log-level")]
    pub log_level: DaemonConfigLogLevel,
    #[serde(rename = "module-manager")]
    pub module_manager: ModuleManagerConfig,
}

impl DaemonConfig {
    pub fn load() -> DaemonResult<Self> {
        for v in std::env::vars() {
            if v.0.eq("BACH_DEFAULT_CONFIG") {
                let file = fs::File::open(Path::new(&v.1))?;
                let ret: DaemonConfig = quick_xml::de::from_reader(BufReader::new(file))?;

                return Ok(ret);
            }
        }

        let file = fs::File::open(Path::new("/etc/bach/bachd.conf.xml"))?;
        let ret: DaemonConfig = quick_xml::de::from_reader(BufReader::new(file))?;
        Ok(ret)
    }

    pub fn save(&self, fname: &Path) -> DaemonResult<()> {
        let file = fs::File::create(fname)?;
        quick_xml::se::to_writer(file, &self)?;

        Ok(())
    }
}

pub fn mk_tcp_connection(config: &DaemonConfig) -> DaemonResult<TcpStream> {
    let port = config.port.0;
    let cstr = format!("{}:{}", config.ip.0, port);
    let stream = TcpStream::connect(&cstr)?;

    Ok(stream)
}

pub fn spawn() -> thread::JoinHandle<DaemonResult<()>> {
    thread::spawn(move || -> DaemonResult<()> {
        let config: DaemonConfig = DaemonConfig::load()?;
        let mut tcp = mk_tcp_connection(&config)?;
        unsafe {
            module_manager = DaemonStatic::mkinit(modulemanager::ModuleManager::from_config(
                config.module_manager,
            )?);
            bus = DaemonStatic::mkinit(Bus::new());
            modulemanager::connect(&module_manager.inner().unwrap(), &bus.inner().unwrap());
            loop {
                let mut current_core: PacketCore = [0u8; CORE_SIZE];
                tcp.read(&mut current_core)?;
                match module_manager.inner() {
                    Some(mutex) => {
                        match mutex.lock() {
                            Ok(manager) => {
                                manager.fire_cyclic();
                            },
                            Err(_) => (),
                        }   
                    },
                    None => (),
                }

                thread::sleep(Duration::from_millis(25));
            }
        }

        Ok(())
    })
}
